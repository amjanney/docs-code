/**

https://juejin.cn/post/6844904021308735502#heading-85

## 浏览器缓存

> 浏览器缓存分为两种情况，强缓存，不需要发送HTTP请求,协商缓存需要发送

### 1.强缓存

1.HTTP/1.0用Expires

Expires即缓存过期过期时间，存在于服务端返回的响应头中，告诉浏览器在这个过期时间之前可以直接从缓存里面获取数据，无需再次请求。

问题：服务器的时间和浏览器的时间可能并不一致，那服务器返回的这个过期时间可能就是不准确的。

2.HTTP/1.1使用的是Cache-Control

缓存资源在一个时间段内有效

`Cache-Control:max-age=3600`, 代表这个响应返回后在 3600 秒，也就是一个小时之内可以直接使用缓存。

更多的属性：

public：浏览器和中间的任何代理节点都可以进行缓存
private：只允许浏览器缓存
no-cache: 跳过强缓存，进入协商缓存
no-store：不允许任何缓存
s-maxage：和max-age类型，针对代理服务器的缓存时间

注意：当Expires和Cache-Control同时存在的时候，Cache-Control会优先考虑

如果当前缓存失效了，就会协商缓存的阶段

### 2.协商缓存

强缓存失效之后，浏览器在请求头中携带相应的缓存tag来向服务器发请求，由服务器根据这个tag，来决定是否使用缓存，这就是协商缓存。

1.Last-Modified

即服务端资源最后修改的时间。浏览器第一次发出请求的时候，服务端会在响应头中加上Last-Modified这个字段

当浏览器再次发起请求的时候，会在请求头中携带If-Modifined-since这个字段

服务端拿到这个字段以后，跟服务器资源最后修改的时间做对比：

- 传过来的时间小于服务器资源最后修改的时间，资源更新了，返回新的资源给浏览器
- 否则返回304，告诉浏览器直接使用缓存

2.ETag

ETag 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。

第一次请求，服务端会把ETag通过响应头传给浏览器

浏览器再次请求的时候，会把ETag作为If-None-Match字段的内容，携带在请求头当中，发给服务端

当服务端收到If-None-Match之后，会跟服务器端的ETag进行对比

- 如果两者不一致，资源更新了，返回新的资源给浏览器
- 否则返回304，告诉浏览器直接使用缓存

注意：服务器会优先考虑ETag。更加精准

### 3.缓存位置

如果缓存命中，资源缓存到了哪里？需要去哪里取？怎么取？

一共有四种缓存位置，优先级从高到低

  1.Service Worker 离线缓存
  2.Memory Cache 存储在内存 读取快，存储时间短 
  3.Disk Cache 存储在磁盘 读取慢 存储时间长，容量大
  4.Push Cache 推送缓存

浏览器如何决定将资源放进内存还是硬盘呢？

- 比较大的JS、CSS文件会直接被丢进磁盘，反之丢进内存
- 内存使用率比较高的时候，文件优先进入磁盘


 */

/**
## 浏览器的本地存储

1.Cookie

cookie是弥补http无状态的缺陷，浏览器向同一个域名发送请求的时候，都会携带一个相同的cookie，服务端拿到cookie，才能知道浏览器的状态

不足之处：

- 只有4k
- 文本形式存储，容易被窃取（TODO：如何防止cookie被窃取？）

2.localStorage

localStorage有一点跟Cookie一样，就是针对一个域名，即在同一个域名下，会存储相同的一段localStorage。

- 容量:localStorage 的容量上限为5M
- 只存在客户端，默认不参与与服务端的通信。

如果是存储对象需要调用JSON的stringify方法，并且用JSON.parse来解析成对象。

`
let name = localStorage.getItem("name");
let info = JSON.parse(localStorage.getItem("info"));
`

3.sessionStorage

- 容量:容量上限也为 5M。
- 只存在客户端，默认不参与与服务端的通信。
- 页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。


应用场景

- 可以用它对表单信息进行维护，将表单信息存储在里面，可以保证页面即使刷新也不会让之前的表单信息丢失。
- 可以用它存储本次浏览记录。如果关闭页面后不需要这些记录，用sessionStorage就再合适不过了。事实上微博就采取了这样的存储方式

4.IndexedDB
 */
